'use client'

import React from 'react'
import { FileCode, Download, RefreshCw, Clock, AlertCircle } from 'lucide-react'
import type { DevBankAsset } from '@/services/developmentBankService'

interface SpecificationDisplayProps {
  asset: DevBankAsset | null
  loading?: boolean
  onRegenerate?: () => void
}

export default function SpecificationDisplay({ 
  asset, 
  loading = false, 
  onRegenerate 
}: SpecificationDisplayProps) {
  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="flex items-center space-x-2 text-gray-500">
          <RefreshCw className="w-5 h-5 animate-spin" />
          <span>Generating specification...</span>
        </div>
      </div>
    )
  }

  if (!asset) {
    return (
      <div className="flex flex-col items-center justify-center p-8 text-gray-500">
        <FileCode className="w-12 h-12 mb-4 text-gray-300" />
        <h3 className="text-lg font-medium mb-2">No Specification Selected</h3>
        <p className="text-sm text-center">
          Select a specification from the list or generate a new one from your strategy cards.
        </p>
      </div>
    )
  }

  const { content, metadata } = asset

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <FileCode className="w-6 h-6 text-blue-500" />
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              {asset.asset_type === 'tech-spec' ? 'Technical Specification' : 
               asset.asset_type === 'api-spec' ? 'API Specification' :
               asset.asset_type === 'database-schema' ? 'Database Schema' :
               asset.asset_type === 'deployment-guide' ? 'Deployment Guide' :
               asset.asset_type === 'test-scenario' ? 'Test Scenarios' :
               asset.asset_type === 'task-list' ? 'Task List' : 
               'Specification'}
            </h3>
            <p className="text-sm text-gray-500">
              Version {asset.version} â€¢ Created {new Date(asset.created_at).toLocaleDateString()}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {onRegenerate && (
            <button
              onClick={onRegenerate}
              className="inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Regenerate
            </button>
          )}
          
          <button className="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700">
            <Download className="w-4 h-4 mr-2" />
            Export
          </button>
        </div>
      </div>

      {/* Metadata */}
      {metadata && (
        <div className="bg-gray-50 rounded-lg p-4">
          <h4 className="text-sm font-medium text-gray-900 mb-2">Metadata</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            {metadata.generatedBy && (
              <div>
                <span className="text-gray-500">Generated by:</span>
                <span className="ml-2 text-gray-900">{metadata.generatedBy}</span>
              </div>
            )}
            {metadata.featureCount && (
              <div>
                <span className="text-gray-500">Features:</span>
                <span className="ml-2 text-gray-900">{metadata.featureCount}</span>
              </div>
            )}
            {metadata.epicCount && (
              <div>
                <span className="text-gray-500">Epics:</span>
                <span className="ml-2 text-gray-900">{metadata.epicCount}</span>
              </div>
            )}
            {metadata.generatedAt && (
              <div>
                <span className="text-gray-500">Generated:</span>
                <span className="ml-2 text-gray-900">
                  {new Date(metadata.generatedAt).toLocaleString()}
                </span>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Content Display */}
      <div className="space-y-4">
        {content.sections && (
          <div className="space-y-6">
            {Object.entries(content.sections).map(([sectionKey, sectionContent]) => (
              <div key={sectionKey} className="border border-gray-200 rounded-lg">
                <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                  <h4 className="text-sm font-medium text-gray-900 capitalize">
                    {sectionKey.replace(/([A-Z])/g, ' $1').trim()}
                  </h4>
                </div>
                <div className="p-4">
                  {typeof sectionContent === 'string' ? (
                    <div className="prose prose-sm max-w-none">
                      <pre className="whitespace-pre-wrap text-sm text-gray-700">
                        {sectionContent}
                      </pre>
                    </div>
                  ) : (
                    <pre className="whitespace-pre-wrap text-sm text-gray-700">
                      {JSON.stringify(sectionContent, null, 2)}
                    </pre>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {content.formats && (
          <div className="space-y-4">
            <h4 className="text-sm font-medium text-gray-900">Available Formats</h4>
            <div className="grid grid-cols-1 gap-4">
              {content.formats.markdown && (
                <div className="border border-gray-200 rounded-lg">
                  <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <h5 className="text-sm font-medium text-gray-900">Markdown</h5>
                  </div>
                  <div className="p-4">
                    <pre className="whitespace-pre-wrap text-sm text-gray-700">
                      {content.formats.markdown}
                    </pre>
                  </div>
                </div>
              )}
              
              {content.formats.aiReady && (
                <div className="border border-gray-200 rounded-lg">
                  <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <h5 className="text-sm font-medium text-gray-900">AI-Ready Format</h5>
                  </div>
                  <div className="p-4">
                    <pre className="whitespace-pre-wrap text-sm text-gray-700">
                      {content.formats.aiReady}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {content.raw && !content.sections && !content.formats && (
          <div className="border border-gray-200 rounded-lg">
            <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
              <h4 className="text-sm font-medium text-gray-900">Content</h4>
            </div>
            <div className="p-4">
              <pre className="whitespace-pre-wrap text-sm text-gray-700">
                {typeof content.raw === 'string' ? content.raw : JSON.stringify(content.raw, null, 2)}
              </pre>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
